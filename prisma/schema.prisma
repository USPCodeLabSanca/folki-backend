// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model campus {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  institutes     institute[]
  groups         group[]          @relation("group_campus")
  important_date important_date[]
}

model institute {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  isVisible Boolean @default(true)
  campus    campus? @relation(fields: [campusId], references: [id])
  campusId  Int?
  user      user[]
}

model course {
  id    Int    @id @default(autoincrement())
  name  String
  users user[]
}

model subject {
  id               Int             @id @default(autoincrement())
  name             String
  code             String          @unique
  driveItemsNumber Int             @default(0)
  subjectClass     subject_class[]
  driveItems       drive_item[]
}

model subject_class {
  id            Int            @id @default(autoincrement())
  subject       subject        @relation(fields: [subjectId], references: [id])
  subjectId     Int
  availableDays Json
  year          Int
  semester      Int
  user_subject  user_subject[]
  activity      activity[]
}

model user {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  name                String
  institute           institute?            @relation(fields: [instituteId], references: [id])
  course              course?               @relation(fields: [courseId], references: [id])
  courseId            Int?
  instituteId         Int?
  isAdmin             Boolean               @default(false)
  isBlocked           Boolean               @default(false)
  securePin           String?               @default("1234")
  notificationId      String?
  createdAt           DateTime              @default(now())
  deletedAt           DateTime?
  updatedAt           DateTime              @updatedAt
  lastLogin           DateTime?
  lastAccess          DateTime?
  userVersion         String?
  user_subject        user_subject[]
  activity            activity[]
  user_activity_check user_activity_check[]
}

model user_subject {
  id             Int            @id @default(autoincrement())
  user           user           @relation(fields: [userId], references: [id])
  userId         Int
  subjectClass   subject_class  @relation(fields: [subjectClassId], references: [id])
  subjectClassId Int
  absences       Int            @default(0)
  grading        Float          @default(0)
  createdAt      DateTime       @default(now())
  deletedAt      DateTime?
  user_absences  user_absence[]
  grade          grade[]
}

model user_absence {
  id            Int          @id @default(autoincrement())
  date          DateTime
  createdAt     DateTime     @default(now())
  userSubject   user_subject @relation(fields: [userSubjectId], references: [id])
  userId        Int
  userSubjectId Int
}

model activity {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  value               Float?
  userId              Int
  subjectClassId      Int
  subjectClass        subject_class         @relation(fields: [subjectClassId], references: [id])
  user                user                  @relation(fields: [userId], references: [id])
  type                ActivityType
  finishDate          DateTime              @db.Date
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  isPrivate           Boolean               @default(false)
  deletedAt           DateTime?
  user_activity_check user_activity_check[]
}

model group {
  id               Int          @id @default(autoincrement())
  name             String
  shortDescription String
  fullDescription  String
  logo             String
  importanceWeight Int          @default(1)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  campuses         campus[]     @relation("group_campus")
  tags             tag[]        @relation("group_tag")
  links            group_link[]
}

model group_link {
  id        Int      @id @default(autoincrement())
  icon      String?
  name      String?
  link      String
  createdAt DateTime @default(now())
  group     group    @relation(fields: [groupId], references: [id])
  groupId   Int
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  groups    group[]  @relation("group_tag")
}

model drive_item {
  id        Int      @id @default(autoincrement())
  name      String
  link      String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  subject   subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
}

model important_date {
  id           Int            @id @default(autoincrement())
  name         String
  date         DateTime
  type         ImportDateType
  shouldNotify Boolean        @default(false)
  campusId     Int?
  campus       campus?        @relation(fields: [campusId], references: [id])
}

model user_activity_check {
  userId     Int
  user       user     @relation(fields: [userId], references: [id])
  activity   activity @relation(fields: [activityId], references: [id])
  activityId Int
  createdAt  DateTime @default(now())

  @@id([userId, activityId])
  @@index([userId, activityId])
}

model grade {
  id            Int          @id @default(autoincrement())
  name          String
  value         Float
  percentage    Float
  userSubjectId Int
  createdAt     DateTime     @default(now())
  userSubject   user_subject @relation(fields: [userSubjectId], references: [id])
}

enum ActivityType {
  EXAM
  HOMEWORK
  ACTIVITY
  LIST
}

enum ImportDateType {
  DAY_OFF
  GENERAL
}
